package org.homeplant.telegram;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.CallbackQuery;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.model.request.ReplyKeyboardMarkup;
import com.pengrad.telegrambot.request.DeleteMessage;
import com.pengrad.telegrambot.request.SendMessage;
import jakarta.annotation.PostConstruct;
import org.homeplant.model.ConsultationTask;
import org.homeplant.model.Feedback;
import org.homeplant.repository.ConsultationTaskRepository;
import org.homeplant.repository.FeedbackRepository;
import org.homeplant.service.ConsultationTaskService;
import org.homeplant.service.FeedbackService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.event.TransactionPhase;
import org.springframework.transaction.event.TransactionalEventListener;
import org.springframework.transaction.support.TransactionTemplate;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.UUID;

@Service
public class TelegramBotService implements UpdatesListener {

    @Value("${telegram.admin-chat-id}")
    private Long adminChatId; // –ï–¥–∏–Ω—ã–π chatId –∞–¥–º–∏–Ω–∞

    private final TelegramBot telegramBot;
    private final ConsultationTaskService consultationTaskService;
    private final ConsultationTaskRepository consultationTaskRepository;
    private final FeedbackService feedbackService;
    private final FeedbackRepository feedbackRepository;

    @Autowired
    public TelegramBotService(TelegramBot telegramBot,
                              ConsultationTaskService consultationTaskService,
                              ConsultationTaskRepository consultationTaskRepository,
                              FeedbackService feedbackService,
                              FeedbackRepository feedbackRepository) {
        this.telegramBot = telegramBot;
        this.consultationTaskService = consultationTaskService;
        this.consultationTaskRepository = consultationTaskRepository;
        this.feedbackService = feedbackService;
        this.feedbackRepository = feedbackRepository;
    }

    @Autowired
    private PlatformTransactionManager transactionManager;

    @PostConstruct
    public void init() {
        telegramBot.setUpdatesListener(this);
    }

    @Override
    public int process(List<Update> updates) {
        updates.forEach(update -> {
            try {
                processUpdate(update);
            } catch (Exception e) {
                sendMessage("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            }
        });
        return UpdatesListener.CONFIRMED_UPDATES_ALL;
    }

    private void processUpdate(Update update) {

        if (update.callbackQuery() != null) {
            handleCallback(update.callbackQuery());
            return;
        }

        Message message = update.message();
        if (message == null) {
            return;
        }

        Long chatId = message.chat().id();

        if (chatId.equals(adminChatId)) {
            handleCommand(message);
        } else {
            sendNonAdminResponse(chatId);
        }
    }

    private void sendNonAdminResponse(Long chatId) {
        telegramBot.execute(new SendMessage(chatId, """
         –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.
         –í–∞—à chat_id: `%d`
         
         –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, —Å–æ–æ–±—â–∏–≤ –µ–º—É –≤–∞—à chat_id
         """.formatted(chatId)));
    }

    private void handleCommand(Message message) {
        String text = message.text().trim();

        switch (text) {
            case "/start":
            case "üÜò –ü–æ–º–æ—â—å":
                sendWelcomeMessage();
                break;
            case "/tasks":
            case "üìã –ó–∞—è–≤–∫–∏":
                sendRecentConsultations();
                break;
            case "/feedbacks":
            case "üìù –û–±—Ä–∞—â–µ–Ω–∏—è":
                sendRecentFeedbacks();
                break;
            default:
                sendMessage("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", getMainMenuKeyboard());
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void handleNewConsultationTask(ConsultationTask task) {
        String message = "\uD83D\uDE80 *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê* \uD83D\uDE80\n" + formatConsultation(task);
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(
         new InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å").callbackData("delete_consult_" + task.getId())
        );
        sendMessage(message, keyboard);
    }

    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void handleNewFeedback(Feedback feedback) {
        String message = "\uD83C\uDF1F *–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï* \uD83C\uDF1F\n" + formatFeedback(feedback);
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(
         new InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å").callbackData("delete_feedback_" + feedback.getId())
        );
        sendMessage(message, keyboard);
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    private void sendWelcomeMessage() {
        String text = """
         üåø –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ HomePlant
         
         –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
         
         /tasks - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Å–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ (–∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
         
         /feedbacks - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email –∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞)
         
         –ü—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–æ–≤ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π, —è —Å—Ä–∞–∑—É –æ–ø—É–±–ª–∏–∫—É—é –∏—Ö –≤ —á–∞—Ç, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
         """;
        sendMessage(text, getMainMenuKeyboard());
    }

    private void sendRecentConsultations() {
        List<ConsultationTask> tasks = consultationTaskRepository.findAll();

        if (tasks.isEmpty()) {
            sendMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", getMainMenuKeyboard());
            return;
        }

        tasks.forEach(task -> {
            String message = formatConsultation(task);
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(
             new InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å").callbackData("delete_consult_" + task.getId())
            );
            sendMessage(message, keyboard);
        });
    }

    private void sendRecentFeedbacks() {
        List<Feedback> feedbacks = feedbackRepository.findAll();

        if (feedbacks.isEmpty()) {
            sendMessage("–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π", getMainMenuKeyboard());
            return;
        }

        feedbacks.forEach(feedback -> {
            String message = formatFeedback(feedback);
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(
             new InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å").callbackData("delete_feedback_" + feedback.getId())
            );
            sendMessage(message, keyboard);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
    private void handleCallback(CallbackQuery callback) {
        String data = callback.data();
        TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);

        try {
            transactionTemplate.execute(status -> {
                if (data.startsWith("delete_consult_")) {
                    UUID id = UUID.fromString(data.substring(15));
                    consultationTaskService.deleteTask(id);
                    sendMessage("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞", getMainMenuKeyboard());
                } else if (data.startsWith("delete_feedback_")) {
                    UUID id = UUID.fromString(data.substring(16));
                    feedbackService.deleteFeedback(id);
                    sendMessage("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–æ", getMainMenuKeyboard());
                }
                return null;
            });
            telegramBot.execute(new DeleteMessage(adminChatId, callback.message().messageId()));
        } catch (Exception e) {
            sendMessage("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private ReplyKeyboardMarkup getMainMenuKeyboard() {
        return new ReplyKeyboardMarkup(
         new String[]{"üìã –ó–∞—è–≤–∫–∏", "üìù –û–±—Ä–∞—â–µ–Ω–∏—è"},
         new String[]{"üÜò –ü–æ–º–æ—â—å"}
        ).resizeKeyboard(true);
    }

    private void sendMessage(String text) {
        telegramBot.execute(new SendMessage(adminChatId, text));
    }

    private void sendMessage(String text, InlineKeyboardMarkup keyboard) {
        telegramBot.execute(new SendMessage(adminChatId, text).replyMarkup(keyboard));
    }

    private void sendMessage(String text, ReplyKeyboardMarkup keyboard) {
        telegramBot.execute(new SendMessage(adminChatId, text).replyMarkup(keyboard));
    }

    private String formatConsultation(ConsultationTask task) {
        return String.format(
         """
          üìÖ –î–∞—Ç–∞: %s
          üë§ –ò–º—è: %s
          üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
          """,
         task.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")),
         task.getUserName(),
         task.getUserMobileNumber());
    }

    private String formatFeedback(Feedback feedback) {
        return String.format(
         """
          üìÖ –î–∞—Ç–∞: %s
          üë§ –ò–º—è: %s
          üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
          ‚úâÔ∏è Email: %s
          üìù –¢–µ–∫—Å—Ç: %s
          """,
         feedback.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")),
         feedback.getUserName(),
         feedback.getUserMobileNumber(),
         feedback.getUserEmail() != null ? feedback.getUserEmail() : "–Ω–µ —É–∫–∞–∑–∞–Ω",
         feedback.getUserRequestText() != null ?
          feedback.getUserRequestText().length() > 100 ?
           feedback.getUserRequestText().substring(0, 100) + "..." :
           feedback.getUserRequestText() :
          "–±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        );
    }
}